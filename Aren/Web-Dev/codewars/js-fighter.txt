//My Correct Solution
function declareWinner(fighter1, fighter2, firstAttacker) {

    if(firstAttacker == fighter1.toString()){
       while(true) {
           fighter2.health -= fighter1.damagePerAttack;
           if(fighter2.health < 1 ) return fighter1.toString();
           fighter1.health -= fighter2.damagePerAttack;
           if(fighter1.health < 1 ) return fighter2.toString();
       }
    }
    else if(firstAttacker == fighter2.toString()){
        while(true) {
            fighter1.health -= fighter2.damagePerAttack;
            if(fighter1.health < 1 ) return fighter2.toString();
            fighter2.health -= fighter1.damagePerAttack;
            if(fighter2.health < 1 ) return fighter1.toString();
        }
    }
}

//Another Correct Solution
function declareWinner(fighter1, fighter2, firstAttacker) {
  var fac1 = Math.ceil( fighter1.health / fighter2.damagePerAttack );
  var fac2 = Math.ceil( fighter2.health / fighter1.damagePerAttack );
  if(fac1 < fac2) {
    return fighter2.name;
  } else if(fac2 < fac1) {
    return fighter1.name;
  } else {
    return firstAttacker;
  }
}

//Another Correct Solution
function declareWinner(fighter1, fighter2, firstAttacker) {
  if (fighter1.name !== firstAttacker) return declareWinner(fighter2, fighter1, fighter2.name)
  if (fighter1.health <= 0) return fighter2.name
  if (fighter2.health <= 0) return fighter1.name

  return declareWinner(new Fighter(fighter2.name, fighter2.health - fighter1.damagePerAttack, fighter2.damagePerAttack), fighter1, fighter2.name)
}

//Another Correct Solution
function declareWinner(fighter1, fighter2, firstAttacker) {
  var attacker = (fighter1.name === firstAttacker)
    ? fighter1
    : fighter2;
  
  function noOneWins(){
    return ((fighter1.health > 0) && (fighter2.health > 0));
  }
  
  function getNextAttacker(attacker){
    return (attacker === fighter1) ? fighter2 : fighter1;
  }
  
  function getDefender(attacker){
    return getNextAttacker(attacker);
  }
  
  function killRound(attacker){
    var defender = getDefender(attacker);
    defender.health -= attacker.damagePerAttack;
  }
  
  function getWinner(){
    return (fighter1.health > 0) 
      ? fighter1.name 
      : fighter2.name;
  }
  
  while(noOneWins()) {
    killRound(attacker);
    attacker=getNextAttacker(attacker);
  }
  
  return getWinner();
}

//Another Correct Solution
Object.defineProperties(Fighter.prototype, {
  isDead: {get: function() { return this.health <= 0; } },
  attack: {value: function(other) { other.health -= this.damagePerAttack; } }
});

function declareWinner(fighter1, fighter2, firstAttacker) {
  var [a,b] = (fighter1.name === firstAttacker) ? [fighter1, fighter2] : [fighter2, fighter1];
  while(true)
  {
    a.attack(b);
    if (b.isDead) return a.name;
    b.attack(a);
    if (a.isDead) return b.name;
  }
}

//Another Correct Solution
const declareWinner = (f1, f2, fa) => {
  
  if (f2.name === fa) [f1, f2] = [f2, f1];

  while (f1.health > 0) {
    f2.health -= f1.damagePerAttack;
    [f1, f2] = [f2, f1];
  }
  
  return f2.name;
};

//Another Correct Solution
function declareWinner(fighter1, fighter2, firstAttacker) {
  var res = Math.ceil(fighter1.health / fighter2.damagePerAttack) - 
            Math.ceil(fighter2.health / fighter1.damagePerAttack);
  return res > 0 ? fighter1.name : (res < 0? fighter2.name : firstAttacker);
}